@inherits ComponentBase
@inject NavigationManager NavigationManager
@inject IEmployeeService employeeService

<NewDependent OnDependentAdded="DependentListChanged"></NewDependent>
@if (Dependents?.Count() > 0)
{
    <hr />
    <h3>Dependents</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Middle Name</th>
                <th>Last Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dependent in Dependents)
            {
                <CascadingValue Value=@dependent>
                    <tr>
                        <Dependent OnDependentRemoved="DependentListChanged"></Dependent>
                    </tr>
                </CascadingValue>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Models.Dependent>? Dependents;

    [CascadingParameter]
    public int EmployeeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Dependents = await employeeService.GetEmployeeDependents(EmployeeId);
        await OnDependentsAltered.InvokeAsync(EmployeeId);
    }

    public async Task DependentListChanged()
    {
        Dependents = await employeeService.GetEmployeeDependents(EmployeeId);
        await OnDependentsAltered.InvokeAsync(EmployeeId);
    }

    [Parameter]
    public EventCallback<int> OnDependentsAltered { get; set; }
}